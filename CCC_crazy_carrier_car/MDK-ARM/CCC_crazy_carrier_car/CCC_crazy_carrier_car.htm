<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [CCC_crazy_carrier_car\CCC_crazy_carrier_car.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image CCC_crazy_carrier_car\CCC_crazy_carrier_car.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Thu Jul 24 11:48:43 2025
<BR><P>
<H3>Maximum Stack Usage =        424 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; new_material_test &rArr; test_new_material_all_process &rArr; new_material_get_and_put_some_with_load_first &rArr; new_get_and_pre_put_avoid &rArr; arm_shrink_all &rArr; feetech_servo_move &rArr; WritePosEx &rArr; genWrite &rArr; Ack &rArr; checkHead &rArr; readSCS &rArr; Uart_Read &rArr; HAL_UART_Receive &rArr; UART_WaitOnFlagUntilTimeout
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1c]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC_IRQHandler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[b5]">UART_EndRxTransfer</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b5]">UART_EndRxTransfer</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from stm32f4xx_it.o(i.BusFault_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1e]">CAN1_RX0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1f]">CAN1_RX1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[20]">CAN1_SCE_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1d]">CAN1_TX_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4a]">CAN2_RX0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4b]">CAN2_RX1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4c]">CAN2_SCE_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[49]">CAN2_TX_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[58]">DCMI_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[15]">DMA1_Stream0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[16]">DMA1_Stream1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[17]">DMA1_Stream2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[18]">DMA1_Stream3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[19]">DMA1_Stream4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1a]">DMA1_Stream5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1b]">DMA1_Stream6_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[39]">DMA1_Stream7_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[42]">DMA2_Stream0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[43]">DMA2_Stream1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[44]">DMA2_Stream2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[45]">DMA2_Stream3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[46]">DMA2_Stream4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4e]">DMA2_Stream5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4f]">DMA2_Stream6_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[50]">DMA2_Stream7_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from stm32f4xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[47]">ETH_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[48]">ETH_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3a]">FMC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5a]">FPU_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[59]">HASH_RNG_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32f4xx_it.o(i.HardFault_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[53]">I2C3_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[52]">I2C3_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from stm32f4xx_it.o(i.MemManage_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32f4xx_it.o(i.NMI_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4d]">OTG_FS_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[34]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[55]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[54]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[57]">OTG_HS_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[56]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from stm32f4xx_it.o(i.PendSV_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[33]">RTC_Alarm_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[d]">RTC_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3b]">SDIO_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3d]">SPI3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from stm32f4xx_it.o(i.SVC_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from stm32f4xx_it.o(i.SysTick_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5c]">SystemInit</a> from system_stm32f4xx.o(i.SystemInit) referenced from startup_stm32f407xx.o(.text)
 <LI><a href="#[c]">TAMP_STAMP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[23]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from stm32f4xx_it.o(i.TIM2_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from stm32f4xx_it.o(i.TIM3_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from stm32f4xx_it.o(i.TIM4_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3c]">TIM5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[40]">TIM6_DAC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[41]">TIM7_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[35]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[38]">TIM8_CC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[37]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[36]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3e]">UART4_IRQHandler</a> from stm32f4xx_it.o(i.UART4_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3f]">UART5_IRQHandler</a> from stm32f4xx_it.o(i.UART5_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5e]">UART_DMAAbortOnError</a> from stm32f4xx_hal_uart.o(i.UART_DMAAbortOnError) referenced from stm32f4xx_hal_uart.o(i.HAL_UART_IRQHandler)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from stm32f4xx_it.o(i.USART1_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from stm32f4xx_it.o(i.USART2_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from stm32f4xx_it.o(i.USART3_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[51]">USART6_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from stm32f4xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5d]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f407xx.o(.text)
 <LI><a href="#[60]">_sputc</a> from printf3.o(i._sputc) referenced from printf3.o(i.__0sprintf$3)
 <LI><a href="#[5f]">fputc</a> from main.o(i.fputc) referenced from printf3.o(i.__0printf$3)
 <LI><a href="#[5b]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[5d]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(.text)
</UL>
<P><STRONG><a name="[139]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[61]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[77]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[13a]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[13b]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[13c]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[13d]"></a>__rt_lib_shutdown_fini</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry12b.o(.ARM.Collect$$$$0000000E))

<P><STRONG><a name="[13e]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[13f]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$00000011))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>

<P><STRONG><a name="[126]"></a>rand</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;old_function_test
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_motor_servo_screen_test
</UL>

<P><STRONG><a name="[140]"></a>srand</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rand.o(.text), UNUSED)

<P><STRONG><a name="[141]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[123]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_new_material_all_process
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_material_test
</UL>

<P><STRONG><a name="[142]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[67]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[143]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[144]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[66]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_receive_process_3
</UL>

<P><STRONG><a name="[9f]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[145]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[68]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[118]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;single_line_circle_adjust
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;single_line_adjust
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_and_put_in_spin_plate_cricle_all_v2
</UL>

<P><STRONG><a name="[69]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slight_spin_and_move
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_all_direction_position_delay
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_receive_process_3
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>

<P><STRONG><a name="[6d]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[6e]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[6f]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spin_right
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slight_spin_and_move
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_all_direction_position_delay
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_show_origin_data
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_receive_process_3
</UL>

<P><STRONG><a name="[70]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spin_right
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_show_origin_data
</UL>

<P><STRONG><a name="[71]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_all_direction_position_delay
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_show_origin_data
</UL>

<P><STRONG><a name="[72]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_all_direction_position_delay
</UL>

<P><STRONG><a name="[73]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_all_direction_position_delay
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_show_origin_data
</UL>

<P><STRONG><a name="[74]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spin_right
</UL>

<P><STRONG><a name="[d9]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spin_right
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slight_spin_and_move
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_receive_process_3
</UL>

<P><STRONG><a name="[75]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slight_spin_and_move
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_receive_process_3
</UL>

<P><STRONG><a name="[146]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[e3]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[65]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[147]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[64]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[148]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[6a]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[149]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[14a]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[76]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[14b]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[6c]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[6b]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[62]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[14c]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[14d]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[14e]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[78]"></a>Ack</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, scs.o(i.Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Ack &rArr; checkHead &rArr; readSCS &rArr; Uart_Read &rArr; HAL_UART_Receive &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readSCS
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkHead
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;genWrite
</UL>

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>Emm_V5_Pos_Control</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, motor.o(i.Emm_V5_Pos_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Emm_V5_Pos_Control &rArr; usart_SendCmd_u1 &rArr; usart_SendByte_u1
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_SendCmd_u1
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spin_right_90
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spin_right_180
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spin_right
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spin_left_90
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spin_left_180
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_all_direction_position
</UL>

<P><STRONG><a name="[7d]"></a>Emm_V5_Stop_Now</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, motor.o(i.Emm_V5_Stop_Now))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Emm_V5_Stop_Now &rArr; usart_SendCmd_u1 &rArr; usart_SendByte_u1
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_SendCmd_u1
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spin_all_direction_tim
</UL>

<P><STRONG><a name="[7e]"></a>Emm_V5_Synchronous_motion</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, motor.o(i.Emm_V5_Synchronous_motion))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Emm_V5_Synchronous_motion &rArr; usart_SendCmd_u1 &rArr; usart_SendByte_u1
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_SendCmd_u1
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spin_right_90
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spin_right_180
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spin_right
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spin_left_90
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spin_left_180
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slight_spin_and_move
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_all_direction_position
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spin_all_direction_tim
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_all_direction_tim
</UL>

<P><STRONG><a name="[7f]"></a>Emm_V5_Vel_Control</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, motor.o(i.Emm_V5_Vel_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Emm_V5_Vel_Control &rArr; usart_SendCmd_u1 &rArr; usart_SendByte_u1
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_SendCmd_u1
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slight_spin_and_move
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spin_all_direction_tim
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_all_direction_tim
</UL>

<P><STRONG><a name="[c2]"></a>Error_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(i.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART5_Init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART4_Init
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
</UL>

<P><STRONG><a name="[80]"></a>HAL_DMA_Abort</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_Abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[b6]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_Abort_IT))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[82]"></a>HAL_Delay</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32f4xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spin_right_90
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spin_right_180
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spin_right
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spin_left_90
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spin_left_180
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slight_spin_and_move
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_and_put_spin_plate
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_and_pre_put_void
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_and_pre_put_spin_plate_avoid_collide
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_and_pre_put_avoid
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_and_pre_put
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_and_load_openloop_with_temp_put
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_and_load_openloop_avoid
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_and_load_openloop
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_all_direction_position_delay
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_all_direction_position
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_and_pre_put
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_and_load_openloop
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_new_material_all_process
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;single_line_circle_adjust
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;single_line_adjust
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_to_screen
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_show_origin_data
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_clear_screen
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;old_new_init_car_arm
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;old_material_get_and_put_some_with_load_first
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;old_get_from_plate_all_movement
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;old_function_test
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;old_all_process
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_motor_servo_screen_test
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_material_test
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_material_get_and_put_some_with_load_first
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_from_plate_all_movement
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_from_ground_in_random_position
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_and_put_in_spin_plate_cricle_all_v2
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_final_function_test
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reliable_UART_Transmit
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servo_move_with_limit
</UL>

<P><STRONG><a name="[a0]"></a>HAL_GPIO_Init</STRONG> (Thumb, 450 bytes, Stack size 40 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init
</UL>

<P><STRONG><a name="[ae]"></a>HAL_GPIO_TogglePin</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_TogglePin))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[ac]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[81]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_motor_servo_screen_test
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
</UL>

<P><STRONG><a name="[d3]"></a>HAL_IncTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[83]"></a>HAL_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f4xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[85]"></a>HAL_InitTick</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, stm32f4xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[86]"></a>HAL_MspInit</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stm32f4xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[90]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[88]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[84]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[8a]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 288 bytes, Stack size 32 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[d7]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[d6]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[8b]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[8c]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 856 bytes, Stack size 40 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[87]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f4xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[9b]"></a>HAL_TIMEx_BreakCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim_ex.o(i.HAL_TIMEx_BreakCallback))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[9d]"></a>HAL_TIMEx_CommutCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim_ex.o(i.HAL_TIMEx_CommutCallback))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[c3]"></a>HAL_TIMEx_MasterConfigSynchronization</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, stm32f4xx_hal_tim_ex.o(i.HAL_TIMEx_MasterConfigSynchronization))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
</UL>

<P><STRONG><a name="[8d]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
</UL>

<P><STRONG><a name="[8e]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, tim.o(i.HAL_TIM_Base_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[fd]"></a>HAL_TIM_Base_Start_IT</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_Base_Start_IT))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[91]"></a>HAL_TIM_ConfigClockSource</STRONG> (Thumb, 220 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_ConfigClockSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_TIM_ConfigClockSource &rArr; TIM_TI2_ConfigInputStage
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI2_ConfigInputStage
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI1_ConfigInputStage
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITRx_SetConfig
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETR_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
</UL>

<P><STRONG><a name="[97]"></a>HAL_TIM_IC_CaptureCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_IC_CaptureCallback))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[96]"></a>HAL_TIM_IRQHandler</STRONG> (Thumb, 304 bytes, Stack size 24 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; spin_all_direction_tim &rArr; Emm_V5_Vel_Control &rArr; usart_SendCmd_u1 &rArr; usart_SendByte_u1
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_CommutCallback
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_BreakCallback
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[9e]"></a>HAL_TIM_MspPostInit</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, tim.o(i.HAL_TIM_MspPostInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_TIM_MspPostInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
</UL>

<P><STRONG><a name="[98]"></a>HAL_TIM_OC_DelayElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_OC_DelayElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[a1]"></a>HAL_TIM_PWM_ConfigChannel</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_PWM_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_TIM_PWM_ConfigChannel &rArr; TIM_OC3_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4_SetConfig
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3_SetConfig
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1_SetConfig
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
</UL>

<P><STRONG><a name="[a6]"></a>HAL_TIM_PWM_Init</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_PWM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_TIM_PWM_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_MspInit
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
</UL>

<P><STRONG><a name="[a7]"></a>HAL_TIM_PWM_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_PWM_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
</UL>

<P><STRONG><a name="[99]"></a>HAL_TIM_PWM_PulseFinishedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_PWM_PulseFinishedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[a8]"></a>HAL_TIM_PWM_Start</STRONG> (Thumb, 172 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_PWM_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_PWM_Start &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9a]"></a>HAL_TIM_PeriodElapsedCallback</STRONG> (Thumb, 440 bytes, Stack size 32 bytes, my_timer.o(i.HAL_TIM_PeriodElapsedCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_TIM_PeriodElapsedCallback &rArr; spin_all_direction_tim &rArr; Emm_V5_Vel_Control &rArr; usart_SendCmd_u1 &rArr; usart_SendByte_u1
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_TogglePin
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_handle_function_4
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spin_all_direction_tim
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_all_direction_tim
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[9c]"></a>HAL_TIM_TriggerCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_TriggerCallback))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[af]"></a>HAL_UARTEx_ReceiveToIdle_IT</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, stm32f4xx_hal_uart.o(i.HAL_UARTEx_ReceiveToIdle_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_UARTEx_ReceiveToIdle_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Start_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>

<P><STRONG><a name="[b1]"></a>HAL_UARTEx_RxEventCallback</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, main.o(i.HAL_UARTEx_RxEventCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = HAL_UARTEx_RxEventCallback &rArr; UART_handle_function_3 &rArr; UART_receive_process_3 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_handle_function_3
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_ReceiveToIdle_IT
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
</UL>

<P><STRONG><a name="[b7]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAAbortOnError
</UL>

<P><STRONG><a name="[b3]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 618 bytes, Stack size 24 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = HAL_UART_IRQHandler &rArr; UART_Receive_IT &rArr; HAL_UARTEx_RxEventCallback &rArr; UART_handle_function_3 &rArr; UART_receive_process_3 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
</UL>

<P><STRONG><a name="[b9]"></a>HAL_UART_Init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART5_Init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART4_Init
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init
</UL>

<P><STRONG><a name="[ba]"></a>HAL_UART_MspInit</STRONG> (Thumb, 454 bytes, Stack size 48 bytes, usart.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[bc]"></a>HAL_UART_Receive</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_UART_Receive &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Read
</UL>

<P><STRONG><a name="[be]"></a>HAL_UART_Receive_IT</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_Receive_IT))
<BR><BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Start_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d5]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_RxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
</UL>

<P><STRONG><a name="[bf]"></a>HAL_UART_Transmit</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reliable_UART_Transmit
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Send
</UL>

<P><STRONG><a name="[b8]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_TxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[de]"></a>Host2SCS</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, scs.o(i.Host2SCS))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Host2SCS
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePosEx
</UL>

<P><STRONG><a name="[c0]"></a>MX_GPIO_Init</STRONG> (Thumb, 162 bytes, Stack size 48 bytes, gpio.o(i.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = MX_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c1]"></a>MX_TIM2_Init</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, tim.o(i.MX_TIM2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MX_TIM2_Init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c4]"></a>MX_TIM3_Init</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, tim.o(i.MX_TIM3_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MX_TIM3_Init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c5]"></a>MX_TIM4_Init</STRONG> (Thumb, 194 bytes, Stack size 64 bytes, tim.o(i.MX_TIM4_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = MX_TIM4_Init &rArr; HAL_TIM_MspPostInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c6]"></a>MX_UART4_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, usart.o(i.MX_UART4_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = MX_UART4_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c7]"></a>MX_UART5_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, usart.o(i.MX_UART5_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = MX_UART5_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c8]"></a>MX_USART1_UART_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, usart.o(i.MX_USART1_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = MX_USART1_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c9]"></a>MX_USART2_UART_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, usart.o(i.MX_USART2_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = MX_USART2_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ca]"></a>MX_USART3_UART_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, usart.o(i.MX_USART3_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = MX_USART3_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.NMI_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[cb]"></a>Read</STRONG> (Thumb, 154 bytes, Stack size 40 bytes, scs.o(i.Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Read &rArr; checkHead &rArr; readSCS &rArr; Uart_Read &rArr; HAL_UART_Receive &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wFlushSCS
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readSCS
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rFlushSCS
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeBuf
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkHead
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readWord
</UL>

<P><STRONG><a name="[cf]"></a>ReadPos</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, sms_sts.o(i.ReadPos))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = ReadPos &rArr; readWord &rArr; Read &rArr; checkHead &rArr; readSCS &rArr; Uart_Read &rArr; HAL_UART_Receive &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readWord
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_stretch
</UL>

<P><STRONG><a name="[d1]"></a>Reliable_UART_Transmit</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, main.o(i.Reliable_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Reliable_UART_Transmit &rArr; print_to_screen &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_to_screen
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_and_pre_put_avoid
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_and_pre_put
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_new_material_all_process
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;single_line_circle_adjust
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;single_line_adjust
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;old_material_get_and_put_some_with_load_first
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;old_function_test
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;old_all_process
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_material_get_and_put_some_with_load_first
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_from_plate_all_movement
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_from_ground_in_random_position
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_and_put_in_spin_plate_cricle_all_v2
</UL>

<P><STRONG><a name="[135]"></a>SCS2Host</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, scs.o(i.SCS2Host))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readWord
</UL>

<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.SysTick_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[d4]"></a>SystemClock_Config</STRONG> (Thumb, 138 bytes, Stack size 88 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5c]"></a>SystemInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, system_stm32f4xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(.text)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = TIM2_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; spin_all_direction_tim &rArr; Emm_V5_Vel_Control &rArr; usart_SendCmd_u1 &rArr; usart_SendByte_u1
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.TIM3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = TIM3_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; spin_all_direction_tim &rArr; Emm_V5_Vel_Control &rArr; usart_SendCmd_u1 &rArr; usart_SendByte_u1
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.TIM4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = TIM4_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; spin_all_direction_tim &rArr; Emm_V5_Vel_Control &rArr; usart_SendCmd_u1 &rArr; usart_SendByte_u1
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[8f]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 170 bytes, Stack size 20 bytes, stm32f4xx_hal_tim.o(i.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[a9]"></a>TIM_CCxChannelCmd</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.TIM_CCxChannelCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start
</UL>

<P><STRONG><a name="[92]"></a>TIM_ETR_SetConfig</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.TIM_ETR_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_ETR_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[a3]"></a>TIM_OC2_SetConfig</STRONG> (Thumb, 98 bytes, Stack size 20 bytes, stm32f4xx_hal_tim.o(i.TIM_OC2_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_OC2_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[3e]"></a>UART4_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.UART4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = UART4_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; UART_Receive_IT &rArr; HAL_UARTEx_RxEventCallback &rArr; UART_handle_function_3 &rArr; UART_receive_process_3 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>UART5_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.UART5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = UART5_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; UART_Receive_IT &rArr; HAL_UARTEx_RxEventCallback &rArr; UART_handle_function_3 &rArr; UART_receive_process_3 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[b0]"></a>UART_Start_Receive_IT</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.UART_Start_Receive_IT))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_ReceiveToIdle_IT
</UL>

<P><STRONG><a name="[b2]"></a>UART_handle_function_3</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, my_usart.o(i.UART_handle_function_3))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = UART_handle_function_3 &rArr; UART_receive_process_3 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_receive_process_3
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>

<P><STRONG><a name="[aa]"></a>UART_handle_function_4</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, my_usart.o(i.UART_handle_function_4))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[d8]"></a>UART_receive_process_3</STRONG> (Thumb, 2196 bytes, Stack size 72 bytes, my_usart.o(i.UART_receive_process_3))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = UART_receive_process_3 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_handle_function_3
</UL>

<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = USART1_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; UART_Receive_IT &rArr; HAL_UARTEx_RxEventCallback &rArr; UART_handle_function_3 &rArr; UART_receive_process_3 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = USART2_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; UART_Receive_IT &rArr; HAL_UARTEx_RxEventCallback &rArr; UART_handle_function_3 &rArr; UART_receive_process_3 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = USART3_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; UART_Receive_IT &rArr; HAL_UARTEx_RxEventCallback &rArr; UART_handle_function_3 &rArr; UART_receive_process_3 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[da]"></a>Uart_Init</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, uart.o(i.Uart_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Uart_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_servo_init
</UL>

<P><STRONG><a name="[db]"></a>Uart_Read</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, uart.o(i.Uart_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Uart_Read &rArr; HAL_UART_Receive &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readSCS
</UL>

<P><STRONG><a name="[dc]"></a>Uart_Send</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, uart.o(i.Uart_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Uart_Send &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wFlushSCS
</UL>

<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[dd]"></a>WritePosEx</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, sms_sts.o(i.WritePosEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = WritePosEx &rArr; genWrite &rArr; Ack &rArr; checkHead &rArr; readSCS &rArr; Uart_Read &rArr; HAL_UART_Receive &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;genWrite
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host2SCS
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feetech_servo_move
</UL>

<P><STRONG><a name="[e0]"></a>__0printf$3</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf3.o(i.__0printf$3), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[14f]"></a>__1printf$3</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf3.o(i.__0printf$3), UNUSED)

<P><STRONG><a name="[127]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf3.o(i.__0printf$3))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_to_screen
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_show_origin_data
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_clear_screen
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_motor_servo_screen_test
</UL>

<P><STRONG><a name="[e2]"></a>__0sprintf$3</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printf3.o(i.__0sprintf$3), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[150]"></a>__1sprintf$3</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf3.o(i.__0sprintf$3), UNUSED)

<P><STRONG><a name="[128]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf3.o(i.__0sprintf$3))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_to_screen
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;old_get_from_plate_all_movement
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;old_all_process
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_motor_servo_screen_test
</UL>

<P><STRONG><a name="[151]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[152]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[153]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[e4]"></a>adjust_plate</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, my_servo.o(i.adjust_plate))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = adjust_plate &rArr; servo_move_with_limit &rArr; feetech_servo_move &rArr; WritePosEx &rArr; genWrite &rArr; Ack &rArr; checkHead &rArr; readSCS &rArr; Uart_Read &rArr; HAL_UART_Receive &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servo_move_with_limit
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;old_get_from_plate_all_movement
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_from_plate_all_movement
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_and_put_in_spin_plate_cricle_all_v2
</UL>

<P><STRONG><a name="[e6]"></a>adjust_position_with_camera</STRONG> (Thumb, 448 bytes, Stack size 16 bytes, my_servo.o(i.adjust_position_with_camera))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = adjust_position_with_camera &rArr; servo_move_with_limit &rArr; feetech_servo_move &rArr; WritePosEx &rArr; genWrite &rArr; Ack &rArr; checkHead &rArr; readSCS &rArr; Uart_Read &rArr; HAL_UART_Receive &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servo_move_with_limit
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;old_material_get_and_put_some_with_load_first
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_material_get_and_put_some_with_load_first
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_and_put_in_spin_plate_cricle_all_v2
</UL>

<P><STRONG><a name="[e7]"></a>arm_shrink</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, my_servo.o(i.arm_shrink))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = arm_shrink &rArr; feetech_servo_move &rArr; WritePosEx &rArr; genWrite &rArr; Ack &rArr; checkHead &rArr; readSCS &rArr; Uart_Read &rArr; HAL_UART_Receive &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feetech_servo_move
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_and_put_spin_plate
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_and_pre_put_spin_plate_avoid_collide
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_and_pre_put_avoid
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_and_pre_put
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_and_load_openloop_with_temp_put
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_and_load_openloop_avoid
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_and_load_openloop
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_and_pre_put
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_and_load_openloop
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;old_get_from_plate_all_movement
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_from_plate_all_movement
</UL>

<P><STRONG><a name="[e9]"></a>arm_shrink_all</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, my_servo.o(i.arm_shrink_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = arm_shrink_all &rArr; feetech_servo_move &rArr; WritePosEx &rArr; genWrite &rArr; Ack &rArr; checkHead &rArr; readSCS &rArr; Uart_Read &rArr; HAL_UART_Receive &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feetech_servo_move
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_and_pre_put_spin_plate_avoid_collide
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_and_pre_put_avoid
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_and_load_openloop_with_temp_put
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_and_load_openloop_avoid
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_from_plate_all_movement
</UL>

<P><STRONG><a name="[ea]"></a>arm_stretch</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, my_servo.o(i.arm_stretch))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = arm_stretch &rArr; feetech_servo_move &rArr; WritePosEx &rArr; genWrite &rArr; Ack &rArr; checkHead &rArr; readSCS &rArr; Uart_Read &rArr; HAL_UART_Receive &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPos
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feetech_servo_move
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_new_material_all_process
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;old_new_init_car_arm
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;old_material_get_and_put_some_with_load_first
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;old_get_from_plate_all_movement
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;old_all_process
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_material_get_and_put_some_with_load_first
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_from_plate_all_movement
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_from_ground_in_random_position
</UL>

<P><STRONG><a name="[79]"></a>checkHead</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, scs.o(i.checkHead))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = checkHead &rArr; readSCS &rArr; Uart_Read &rArr; HAL_UART_Receive &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readSCS
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ack
</UL>

<P><STRONG><a name="[eb]"></a>claw_spin_front</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, my_servo.o(i.claw_spin_front))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = claw_spin_front &rArr; feetech_servo_move &rArr; WritePosEx &rArr; genWrite &rArr; Ack &rArr; checkHead &rArr; readSCS &rArr; Uart_Read &rArr; HAL_UART_Receive &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feetech_servo_move
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_and_load_openloop_with_temp_put
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_and_load_openloop_avoid
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_and_load_openloop
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_and_pre_put
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_and_load_openloop
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;old_new_init_car_arm
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;old_get_from_plate_all_movement
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;old_all_process
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_from_plate_all_movement
</UL>

<P><STRONG><a name="[ec]"></a>claw_spin_front_slight</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, my_servo.o(i.claw_spin_front_slight))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = claw_spin_front_slight &rArr; feetech_servo_move &rArr; WritePosEx &rArr; genWrite &rArr; Ack &rArr; checkHead &rArr; readSCS &rArr; Uart_Read &rArr; HAL_UART_Receive &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feetech_servo_move
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_and_put_spin_plate
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_and_pre_put_spin_plate_avoid_collide
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_and_pre_put_avoid
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_and_pre_put
</UL>

<P><STRONG><a name="[ed]"></a>claw_spin_state</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, my_servo.o(i.claw_spin_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = claw_spin_state &rArr; feetech_servo_move &rArr; WritePosEx &rArr; genWrite &rArr; Ack &rArr; checkHead &rArr; readSCS &rArr; Uart_Read &rArr; HAL_UART_Receive &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feetech_servo_move
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_and_put_spin_plate
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_and_pre_put_avoid
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_and_pre_put
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_and_pre_put
</UL>

<P><STRONG><a name="[ee]"></a>claw_spin_state_without_claw</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, my_servo.o(i.claw_spin_state_without_claw))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = claw_spin_state_without_claw &rArr; feetech_servo_move &rArr; WritePosEx &rArr; genWrite &rArr; Ack &rArr; checkHead &rArr; readSCS &rArr; Uart_Read &rArr; HAL_UART_Receive &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feetech_servo_move
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_and_pre_put_spin_plate_avoid_collide
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_and_load_openloop_with_temp_put
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_and_load_openloop
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;old_get_from_plate_all_movement
</UL>

<P><STRONG><a name="[ef]"></a>claw_spin_state_without_claw_slight</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, my_servo.o(i.claw_spin_state_without_claw_slight))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = claw_spin_state_without_claw_slight &rArr; feetech_servo_move &rArr; WritePosEx &rArr; genWrite &rArr; Ack &rArr; checkHead &rArr; readSCS &rArr; Uart_Read &rArr; HAL_UART_Receive &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feetech_servo_move
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_and_load_openloop_avoid
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_and_load_openloop
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_from_plate_all_movement
</UL>

<P><STRONG><a name="[136]"></a>clear_motor_error</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, motor.o(i.clear_motor_error))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;single_line_circle_adjust
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;single_line_adjust
</UL>

<P><STRONG><a name="[fb]"></a>close_claw</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, my_servo.o(i.close_claw))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_and_put_spin_plate
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_and_pre_put_spin_plate_avoid_collide
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_and_pre_put_avoid
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_and_pre_put
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_and_load_openloop_with_temp_put
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_and_load_openloop_avoid
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_and_load_openloop
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_and_pre_put
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_material_test
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_from_plate_all_movement
</UL>

<P><STRONG><a name="[f4]"></a>close_claw_2</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, my_servo.o(i.close_claw_2))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_and_pre_put
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_and_load_openloop
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;old_get_from_plate_all_movement
</UL>

<P><STRONG><a name="[e8]"></a>feetech_servo_move</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, my_servo.o(i.feetech_servo_move))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = feetech_servo_move &rArr; WritePosEx &rArr; genWrite &rArr; Ack &rArr; checkHead &rArr; readSCS &rArr; Uart_Read &rArr; HAL_UART_Receive &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePosEx
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;whole_arm_spin
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_claw_up_top_slight
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_claw_up_top
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_claw_up
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_claw_down_state
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_claw_down_pile_slightly
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_claw_down_near_ground_move_and_line
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_claw_down_near_ground
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_claw_down_ground_slightly
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_claw_down
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_and_put_spin_plate
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_and_pre_put_void
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_and_pre_put_spin_plate_avoid_collide
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_and_pre_put_avoid
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_and_pre_put
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_and_load_openloop_with_temp_put
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_and_load_openloop_avoid
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_and_load_openloop
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_and_pre_put
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_and_load_openloop
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;claw_spin_state_without_claw_slight
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;claw_spin_state_without_claw
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;claw_spin_front
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_stretch
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_shrink_all
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_shrink
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servo_move_with_limit
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_claw_down_slightly
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_claw_down_pile
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_claw_down_ground
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;claw_spin_state
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;claw_spin_front_slight
</UL>

<P><STRONG><a name="[5f]"></a>fputc</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, main.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf3.o(i.__0printf$3)
</UL>
<P><STRONG><a name="[df]"></a>genWrite</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, scs.o(i.genWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = genWrite &rArr; Ack &rArr; checkHead &rArr; readSCS &rArr; Uart_Read &rArr; HAL_UART_Receive &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wFlushSCS
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rFlushSCS
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeBuf
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ack
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePosEx
</UL>

<P><STRONG><a name="[f0]"></a>get_and_load_openloop</STRONG> (Thumb, 502 bytes, Stack size 40 bytes, my_servo.o(i.get_and_load_openloop))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = get_and_load_openloop &rArr; arm_shrink &rArr; feetech_servo_move &rArr; WritePosEx &rArr; genWrite &rArr; Ack &rArr; checkHead &rArr; readSCS &rArr; Uart_Read &rArr; HAL_UART_Receive &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_spin_without_claw
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_claw_up_top
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_claw_down_state
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_claw_bigger
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_claw
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_claw_2
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;claw_spin_state_without_claw
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;claw_spin_front
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_shrink
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_claw_down_ground
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feetech_servo_move
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;old_material_get_and_put_some_with_load_first
</UL>

<P><STRONG><a name="[f8]"></a>get_and_pre_put</STRONG> (Thumb, 354 bytes, Stack size 32 bytes, my_servo.o(i.get_and_pre_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = get_and_pre_put &rArr; arm_shrink &rArr; feetech_servo_move &rArr; WritePosEx &rArr; genWrite &rArr; Ack &rArr; checkHead &rArr; readSCS &rArr; Uart_Read &rArr; HAL_UART_Receive &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_claw_up_top
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_claw_down_state
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_claw_down_near_ground
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_claw
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_claw_2
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_claw
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;claw_spin_front
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_shrink
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_spin
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_claw_down_pile
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feetech_servo_move
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;claw_spin_state
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;old_material_get_and_put_some_with_load_first
</UL>

<P><STRONG><a name="[105]"></a>get_clk</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, motor.o(i.get_clk))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_all_direction_position
</UL>

<P><STRONG><a name="[107]"></a>get_distance_time</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, motor.o(i.get_distance_time))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_all_direction_position_delay
</UL>

<P><STRONG><a name="[5b]"></a>main</STRONG> (Thumb, 226 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = main &rArr; new_material_test &rArr; test_new_material_all_process &rArr; new_material_get_and_put_some_with_load_first &rArr; new_get_and_pre_put_avoid &rArr; arm_shrink_all &rArr; feetech_servo_move &rArr; WritePosEx &rArr; genWrite &rArr; Ack &rArr; checkHead &rArr; readSCS &rArr; Uart_Read &rArr; HAL_UART_Receive &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_servo_init
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART5_Init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART4_Init
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_ReceiveToIdle_IT
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;old_function_test
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;old_all_process
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_motor_servo_screen_test
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_material_test
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_final_function_test
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[104]"></a>move_all_direction_position</STRONG> (Thumb, 770 bytes, Stack size 40 bytes, motor.o(i.move_all_direction_position))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = move_all_direction_position &rArr; Emm_V5_Pos_Control &rArr; usart_SendCmd_u1 &rArr; usart_SendByte_u1
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_clk
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Emm_V5_Synchronous_motion
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Emm_V5_Pos_Control
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_new_material_all_process
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;old_function_test
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;old_all_process
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_motor_servo_screen_test
</UL>

<P><STRONG><a name="[106]"></a>move_all_direction_position_delay</STRONG> (Thumb, 236 bytes, Stack size 56 bytes, motor.o(i.move_all_direction_position_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = move_all_direction_position_delay &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_distance_time
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_new_material_all_process
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;old_function_test
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;old_all_process
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_motor_servo_screen_test
</UL>

<P><STRONG><a name="[ad]"></a>move_all_direction_tim</STRONG> (Thumb, 536 bytes, Stack size 8 bytes, motor.o(i.move_all_direction_tim))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = move_all_direction_tim &rArr; Emm_V5_Vel_Control &rArr; usart_SendCmd_u1 &rArr; usart_SendByte_u1
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Emm_V5_Vel_Control
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Emm_V5_Synchronous_motion
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[fe]"></a>my_servo_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, my_servo.o(i.my_servo_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = my_servo_init &rArr; Uart_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[102]"></a>new_final_function_test</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, main.o(i.new_final_function_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = new_final_function_test &rArr; new_get_and_put_in_spin_plate_cricle_all_v2 &rArr; new_get_and_pre_put_spin_plate_avoid_collide &rArr; arm_shrink_all &rArr; feetech_servo_move &rArr; WritePosEx &rArr; genWrite &rArr; Ack &rArr; checkHead &rArr; readSCS &rArr; Uart_Read &rArr; HAL_UART_Receive &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_claw_up
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;single_line_adjust
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_from_ground_in_random_position
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_and_put_in_spin_plate_cricle_all_v2
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10c]"></a>new_get_and_load_openloop</STRONG> (Thumb, 514 bytes, Stack size 40 bytes, my_servo.o(i.new_get_and_load_openloop))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = new_get_and_load_openloop &rArr; arm_shrink &rArr; feetech_servo_move &rArr; WritePosEx &rArr; genWrite &rArr; Ack &rArr; checkHead &rArr; readSCS &rArr; Uart_Read &rArr; HAL_UART_Receive &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_spin_without_claw
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_claw_up_top_slight
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_claw_up_top
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_claw_down_state
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_claw_bigger
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_claw
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_claw
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;claw_spin_state_without_claw_slight
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;claw_spin_front
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_shrink
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_claw_down_ground
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feetech_servo_move
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_material_test
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_material_get_and_put_some_with_load_first
</UL>

<P><STRONG><a name="[10e]"></a>new_get_and_load_openloop_avoid</STRONG> (Thumb, 462 bytes, Stack size 40 bytes, my_servo.o(i.new_get_and_load_openloop_avoid))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = new_get_and_load_openloop_avoid &rArr; arm_shrink_all &rArr; feetech_servo_move &rArr; WritePosEx &rArr; genWrite &rArr; Ack &rArr; checkHead &rArr; readSCS &rArr; Uart_Read &rArr; HAL_UART_Receive &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_spin_without_claw_avoid_collide
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_spin_without_claw
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_claw_up_top_slight
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_claw_down_state
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_claw_bigger
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_claw_avoid_collide
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_claw
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_claw
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;claw_spin_state_without_claw_slight
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;claw_spin_front
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_shrink_all
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_shrink
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_claw_down_ground
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feetech_servo_move
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_material_test
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_material_get_and_put_some_with_load_first
</UL>

<P><STRONG><a name="[111]"></a>new_get_and_load_openloop_with_temp_put</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, my_servo.o(i.new_get_and_load_openloop_with_temp_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = new_get_and_load_openloop_with_temp_put &rArr; arm_shrink_all &rArr; feetech_servo_move &rArr; WritePosEx &rArr; genWrite &rArr; Ack &rArr; checkHead &rArr; readSCS &rArr; Uart_Read &rArr; HAL_UART_Receive &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_spin_without_claw_avoid_collide
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_spin_without_claw
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_claw_up_top
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_claw_down_state
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_claw_bigger
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_claw_avoid_collide
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_claw_180
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_claw
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_claw
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;claw_spin_state_without_claw
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;claw_spin_front
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_shrink_all
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_shrink
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_claw_down_ground
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feetech_servo_move
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_from_ground_in_random_position
</UL>

<P><STRONG><a name="[113]"></a>new_get_and_pre_put</STRONG> (Thumb, 374 bytes, Stack size 40 bytes, my_servo.o(i.new_get_and_pre_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = new_get_and_pre_put &rArr; arm_shrink &rArr; feetech_servo_move &rArr; WritePosEx &rArr; genWrite &rArr; Ack &rArr; checkHead &rArr; readSCS &rArr; Uart_Read &rArr; HAL_UART_Receive &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_claw_up_top_slight
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_claw_up_top
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_claw_down_state
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_claw_down_near_ground
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_claw
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_claw
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_shrink
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reliable_UART_Transmit
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_spin
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_claw_down_pile
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feetech_servo_move
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;claw_spin_state
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;claw_spin_front_slight
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_material_test
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_material_get_and_put_some_with_load_first
</UL>

<P><STRONG><a name="[114]"></a>new_get_and_pre_put_avoid</STRONG> (Thumb, 404 bytes, Stack size 40 bytes, my_servo.o(i.new_get_and_pre_put_avoid))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = new_get_and_pre_put_avoid &rArr; arm_shrink_all &rArr; feetech_servo_move &rArr; WritePosEx &rArr; genWrite &rArr; Ack &rArr; checkHead &rArr; readSCS &rArr; Uart_Read &rArr; HAL_UART_Receive &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_spin_without_claw_avoid_collide
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_claw_up_top_slight
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_claw_down_state
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_claw_down_near_ground
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_claw_avoid_collide
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_claw
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_shrink_all
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_shrink
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reliable_UART_Transmit
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_spin
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_claw_down_pile
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feetech_servo_move
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;claw_spin_state
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;claw_spin_front_slight
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_material_test
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_material_get_and_put_some_with_load_first
</UL>

<P><STRONG><a name="[115]"></a>new_get_and_pre_put_spin_plate_avoid_collide</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, my_servo.o(i.new_get_and_pre_put_spin_plate_avoid_collide))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = new_get_and_pre_put_spin_plate_avoid_collide &rArr; arm_shrink_all &rArr; feetech_servo_move &rArr; WritePosEx &rArr; genWrite &rArr; Ack &rArr; checkHead &rArr; readSCS &rArr; Uart_Read &rArr; HAL_UART_Receive &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_spin_without_claw_avoid_collide
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_spin_without_claw
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_claw_up_top_slight
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_claw_up_top
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_claw_down_state
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_claw_avoid_collide
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_claw
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;claw_spin_state_without_claw
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_shrink_all
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_shrink
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_claw_down_slightly
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feetech_servo_move
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;claw_spin_front_slight
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_and_put_in_spin_plate_cricle_all_v2
</UL>

<P><STRONG><a name="[117]"></a>new_get_and_pre_put_void</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, my_servo.o(i.new_get_and_pre_put_void))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = new_get_and_pre_put_void &rArr; put_claw_up_top &rArr; feetech_servo_move &rArr; WritePosEx &rArr; genWrite &rArr; Ack &rArr; checkHead &rArr; readSCS &rArr; Uart_Read &rArr; HAL_UART_Receive &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_claw_up_top
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_claw_down_near_ground
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_claw
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_spin
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_claw_down_pile
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feetech_servo_move
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_material_get_and_put_some_with_load_first
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_from_ground_in_random_position
</UL>

<P><STRONG><a name="[108]"></a>new_get_and_put_in_spin_plate_cricle_all_v2</STRONG> (Thumb, 224 bytes, Stack size 40 bytes, main.o(i.new_get_and_put_in_spin_plate_cricle_all_v2))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = new_get_and_put_in_spin_plate_cricle_all_v2 &rArr; new_get_and_pre_put_spin_plate_avoid_collide &rArr; arm_shrink_all &rArr; feetech_servo_move &rArr; WritePosEx &rArr; genWrite &rArr; Ack &rArr; checkHead &rArr; readSCS &rArr; Uart_Read &rArr; HAL_UART_Receive &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_claw_down
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_claw_180
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_and_put_spin_plate
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_and_pre_put_spin_plate_avoid_collide
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_position_with_camera
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_plate
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reliable_UART_Transmit
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_final_function_test
</UL>

<P><STRONG><a name="[11a]"></a>new_get_and_put_spin_plate</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, my_servo.o(i.new_get_and_put_spin_plate))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = new_get_and_put_spin_plate &rArr; arm_shrink &rArr; feetech_servo_move &rArr; WritePosEx &rArr; genWrite &rArr; Ack &rArr; checkHead &rArr; readSCS &rArr; Uart_Read &rArr; HAL_UART_Receive &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_claw_up_top_slight
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_claw_up_top
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_claw_down_state
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_claw_down
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_claw_180
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_claw
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_claw
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_shrink
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_spin
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feetech_servo_move
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;claw_spin_state
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;claw_spin_front_slight
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_and_put_in_spin_plate_cricle_all_v2
</UL>

<P><STRONG><a name="[10b]"></a>new_get_from_ground_in_random_position</STRONG> (Thumb, 246 bytes, Stack size 40 bytes, main.o(i.new_get_from_ground_in_random_position))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = new_get_from_ground_in_random_position &rArr; new_get_and_pre_put_void &rArr; put_claw_up_top &rArr; feetech_servo_move &rArr; WritePosEx &rArr; genWrite &rArr; Ack &rArr; checkHead &rArr; readSCS &rArr; Uart_Read &rArr; HAL_UART_Receive &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;whole_arm_spin
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slight_spin_and_move
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_claw_up_top
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_claw_down_near_ground
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_and_pre_put_void
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_and_load_openloop_with_temp_put
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_stretch
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reliable_UART_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_final_function_test
</UL>

<P><STRONG><a name="[11e]"></a>new_get_from_plate_all_movement</STRONG> (Thumb, 490 bytes, Stack size 48 bytes, main.o(i.new_get_from_plate_all_movement))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = new_get_from_plate_all_movement &rArr; adjust_plate &rArr; servo_move_with_limit &rArr; feetech_servo_move &rArr; WritePosEx &rArr; genWrite &rArr; Ack &rArr; checkHead &rArr; readSCS &rArr; Uart_Read &rArr; HAL_UART_Receive &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;whole_arm_spin
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_spin_without_claw_avoid_collide
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_spin_without_claw
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_claw_up_top_slight
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_claw_up_top
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_claw_down_state
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_claw_down
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_claw_avoid_collide
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_claw_180
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_claw
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_claw
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;claw_spin_state_without_claw_slight
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;claw_spin_front
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_stretch
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_shrink_all
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_shrink
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_plate
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reliable_UART_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_new_material_all_process
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_material_test
</UL>

<P><STRONG><a name="[11f]"></a>new_material_get_and_put_some_with_load_first</STRONG> (Thumb, 556 bytes, Stack size 48 bytes, main.o(i.new_material_get_and_put_some_with_load_first))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = new_material_get_and_put_some_with_load_first &rArr; new_get_and_pre_put_avoid &rArr; arm_shrink_all &rArr; feetech_servo_move &rArr; WritePosEx &rArr; genWrite &rArr; Ack &rArr; checkHead &rArr; readSCS &rArr; Uart_Read &rArr; HAL_UART_Receive &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;whole_arm_spin
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_claw_up_top
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_claw_down_pile_slightly
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_claw_down_near_ground
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_claw_down_ground_slightly
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_claw_bigger
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_claw_180
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_claw
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_and_pre_put_void
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_and_pre_put_avoid
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_and_pre_put
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_and_load_openloop_avoid
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_and_load_openloop
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_stretch
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_position_with_camera
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reliable_UART_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_new_material_all_process
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_material_test
</UL>

<P><STRONG><a name="[ff]"></a>new_material_test</STRONG> (Thumb, 360 bytes, Stack size 72 bytes, main.o(i.new_material_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = new_material_test &rArr; test_new_material_all_process &rArr; new_material_get_and_put_some_with_load_first &rArr; new_get_and_pre_put_avoid &rArr; arm_shrink_all &rArr; feetech_servo_move &rArr; WritePosEx &rArr; genWrite &rArr; Ack &rArr; checkHead &rArr; readSCS &rArr; Uart_Read &rArr; HAL_UART_Receive &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_claw_up_top
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_claw_down_near_ground
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_claw_down_ground_slightly
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_claw_down
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_claw
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_and_pre_put_avoid
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_and_pre_put
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_and_load_openloop_avoid
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_and_load_openloop
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_claw
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_new_material_all_process
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;single_line_circle_adjust
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;old_new_init_car_arm
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_material_get_and_put_some_with_load_first
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_from_plate_all_movement
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[100]"></a>new_motor_servo_screen_test</STRONG> (Thumb, 296 bytes, Stack size 80 bytes, main.o(i.new_motor_servo_screen_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = new_motor_servo_screen_test &rArr; old_new_init_car_arm &rArr; whole_arm_spin &rArr; feetech_servo_move &rArr; WritePosEx &rArr; genWrite &rArr; Ack &rArr; checkHead &rArr; readSCS &rArr; Uart_Read &rArr; HAL_UART_Receive &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_spin_angles
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_all_direction_position_delay
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_all_direction_position
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_to_screen
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;old_new_init_car_arm
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[134]"></a>nopDelay</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scserail.o(i.nopDelay))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rFlushSCS
</UL>

<P><STRONG><a name="[103]"></a>old_all_process</STRONG> (Thumb, 2020 bytes, Stack size 56 bytes, main.o(i.old_all_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = old_all_process &rArr; old_material_get_and_put_some_with_load_first &rArr; get_and_load_openloop &rArr; arm_shrink &rArr; feetech_servo_move &rArr; WritePosEx &rArr; genWrite &rArr; Ack &rArr; checkHead &rArr; readSCS &rArr; Uart_Read &rArr; HAL_UART_Receive &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;whole_arm_spin
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spin_right
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_claw_up
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_claw_down_near_ground_move_and_line
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_claw_down
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_claw_180
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_all_direction_position_delay
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_all_direction_position
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;claw_spin_front
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_stretch
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;single_line_circle_adjust
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;single_line_adjust
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_to_screen
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;old_new_init_car_arm
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;old_material_get_and_put_some_with_load_first
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;old_get_from_plate_all_movement
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reliable_UART_Transmit
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[101]"></a>old_function_test</STRONG> (Thumb, 622 bytes, Stack size 24 bytes, main.o(i.old_function_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = old_function_test &rArr; old_material_get_and_put_some_with_load_first &rArr; get_and_load_openloop &rArr; arm_shrink &rArr; feetech_servo_move &rArr; WritePosEx &rArr; genWrite &rArr; Ack &rArr; checkHead &rArr; readSCS &rArr; Uart_Read &rArr; HAL_UART_Receive &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spin_right_90
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spin_right_180
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spin_left_90
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spin_left_180
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_claw_up
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_claw_down_near_ground
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_claw_down
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_all_direction_position_delay
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_all_direction_position
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;single_line_circle_adjust
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;single_line_adjust
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;old_new_init_car_arm
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;old_material_get_and_put_some_with_load_first
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;old_get_from_plate_all_movement
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reliable_UART_Transmit
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12b]"></a>old_get_from_plate_all_movement</STRONG> (Thumb, 446 bytes, Stack size 64 bytes, main.o(i.old_get_from_plate_all_movement))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = old_get_from_plate_all_movement &rArr; adjust_plate &rArr; servo_move_with_limit &rArr; feetech_servo_move &rArr; WritePosEx &rArr; genWrite &rArr; Ack &rArr; checkHead &rArr; readSCS &rArr; Uart_Read &rArr; HAL_UART_Receive &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;whole_arm_spin
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_spin_without_claw
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_claw_up_top
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_claw_down_state
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_claw_down
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_claw_180
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_claw
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_claw_2
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;claw_spin_state_without_claw
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;claw_spin_front
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_stretch
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_shrink
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_plate
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_to_screen
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;old_function_test
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;old_all_process
</UL>

<P><STRONG><a name="[12d]"></a>old_material_get_and_put_some_with_load_first</STRONG> (Thumb, 406 bytes, Stack size 48 bytes, main.o(i.old_material_get_and_put_some_with_load_first))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = old_material_get_and_put_some_with_load_first &rArr; get_and_load_openloop &rArr; arm_shrink &rArr; feetech_servo_move &rArr; WritePosEx &rArr; genWrite &rArr; Ack &rArr; checkHead &rArr; readSCS &rArr; Uart_Read &rArr; HAL_UART_Receive &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;whole_arm_spin
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_claw_up_top
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_claw_down_ground_slightly
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_claw_bigger
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_claw_180
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_claw
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_and_pre_put
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_and_load_openloop
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_stretch
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_position_with_camera
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_show_origin_data
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_clear_screen
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reliable_UART_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;old_function_test
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;old_all_process
</UL>

<P><STRONG><a name="[122]"></a>old_new_init_car_arm</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, main.o(i.old_new_init_car_arm))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = old_new_init_car_arm &rArr; whole_arm_spin &rArr; feetech_servo_move &rArr; WritePosEx &rArr; genWrite &rArr; Ack &rArr; checkHead &rArr; readSCS &rArr; Uart_Read &rArr; HAL_UART_Receive &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;whole_arm_spin
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_spin_without_claw
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_claw_up_top
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_claw_180
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;claw_spin_front
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_stretch
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;old_function_test
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;old_all_process
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_motor_servo_screen_test
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_material_test
</UL>

<P><STRONG><a name="[f7]"></a>open_claw</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, my_servo.o(i.open_claw))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_and_put_spin_plate
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_and_pre_put_void
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_and_pre_put
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_and_load_openloop_with_temp_put
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_and_load_openloop_avoid
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_and_load_openloop
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_and_pre_put
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_and_load_openloop
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;old_material_get_and_put_some_with_load_first
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;old_get_from_plate_all_movement
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_material_test
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_material_get_and_put_some_with_load_first
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_from_plate_all_movement
</UL>

<P><STRONG><a name="[112]"></a>open_claw_180</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, my_servo.o(i.open_claw_180))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_and_put_spin_plate
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_and_load_openloop_with_temp_put
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;old_new_init_car_arm
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;old_material_get_and_put_some_with_load_first
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;old_get_from_plate_all_movement
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;old_all_process
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_material_get_and_put_some_with_load_first
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_from_plate_all_movement
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_and_put_in_spin_plate_cricle_all_v2
</UL>

<P><STRONG><a name="[10f]"></a>open_claw_avoid_collide</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, my_servo.o(i.open_claw_avoid_collide))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_and_pre_put_spin_plate_avoid_collide
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_and_pre_put_avoid
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_and_load_openloop_with_temp_put
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_and_load_openloop_avoid
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_from_plate_all_movement
</UL>

<P><STRONG><a name="[f2]"></a>open_claw_bigger</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, my_servo.o(i.open_claw_bigger))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_and_load_openloop_with_temp_put
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_and_load_openloop_avoid
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_and_load_openloop
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_and_load_openloop
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;old_material_get_and_put_some_with_load_first
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_material_get_and_put_some_with_load_first
</UL>

<P><STRONG><a name="[133]"></a>print_clear_screen</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, main.o(i.print_clear_screen))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = print_clear_screen &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;single_line_circle_adjust
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;single_line_adjust
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;old_material_get_and_put_some_with_load_first
</UL>

<P><STRONG><a name="[132]"></a>print_show_origin_data</STRONG> (Thumb, 334 bytes, Stack size 48 bytes, main.o(i.print_show_origin_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = print_show_origin_data &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;single_line_circle_adjust
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;single_line_adjust
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;old_material_get_and_put_some_with_load_first
</UL>

<P><STRONG><a name="[d2]"></a>print_to_screen</STRONG> (Thumb, 34 bytes, Stack size 48 bytes, main.o(i.print_to_screen))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = print_to_screen &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;old_get_from_plate_all_movement
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;old_all_process
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_motor_servo_screen_test
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reliable_UART_Transmit
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servo_move_with_limit
</UL>

<P><STRONG><a name="[119]"></a>put_claw_down</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, my_servo.o(i.put_claw_down))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = put_claw_down &rArr; feetech_servo_move &rArr; WritePosEx &rArr; genWrite &rArr; Ack &rArr; checkHead &rArr; readSCS &rArr; Uart_Read &rArr; HAL_UART_Receive &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feetech_servo_move
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_and_put_spin_plate
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_new_material_all_process
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;old_get_from_plate_all_movement
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;old_function_test
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;old_all_process
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_material_test
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_from_plate_all_movement
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_and_put_in_spin_plate_cricle_all_v2
</UL>

<P><STRONG><a name="[f3]"></a>put_claw_down_ground</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, my_servo.o(i.put_claw_down_ground))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = put_claw_down_ground &rArr; feetech_servo_move &rArr; WritePosEx &rArr; genWrite &rArr; Ack &rArr; checkHead &rArr; readSCS &rArr; Uart_Read &rArr; HAL_UART_Receive &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feetech_servo_move
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_and_load_openloop_with_temp_put
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_and_load_openloop_avoid
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_and_load_openloop
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_and_load_openloop
</UL>

<P><STRONG><a name="[120]"></a>put_claw_down_ground_slightly</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, my_servo.o(i.put_claw_down_ground_slightly))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = put_claw_down_ground_slightly &rArr; feetech_servo_move &rArr; WritePosEx &rArr; genWrite &rArr; Ack &rArr; checkHead &rArr; readSCS &rArr; Uart_Read &rArr; HAL_UART_Receive &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feetech_servo_move
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;old_material_get_and_put_some_with_load_first
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_material_test
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_material_get_and_put_some_with_load_first
</UL>

<P><STRONG><a name="[fa]"></a>put_claw_down_near_ground</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, my_servo.o(i.put_claw_down_near_ground))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = put_claw_down_near_ground &rArr; feetech_servo_move &rArr; WritePosEx &rArr; genWrite &rArr; Ack &rArr; checkHead &rArr; readSCS &rArr; Uart_Read &rArr; HAL_UART_Receive &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feetech_servo_move
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_and_pre_put_void
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_and_pre_put_avoid
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_and_pre_put
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_and_pre_put
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_new_material_all_process
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;old_function_test
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_material_test
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_material_get_and_put_some_with_load_first
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_from_ground_in_random_position
</UL>

<P><STRONG><a name="[12c]"></a>put_claw_down_near_ground_move_and_line</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, my_servo.o(i.put_claw_down_near_ground_move_and_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = put_claw_down_near_ground_move_and_line &rArr; feetech_servo_move &rArr; WritePosEx &rArr; genWrite &rArr; Ack &rArr; checkHead &rArr; readSCS &rArr; Uart_Read &rArr; HAL_UART_Receive &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feetech_servo_move
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;old_all_process
</UL>

<P><STRONG><a name="[fc]"></a>put_claw_down_pile</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, my_servo.o(i.put_claw_down_pile))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = put_claw_down_pile &rArr; feetech_servo_move &rArr; WritePosEx &rArr; genWrite &rArr; Ack &rArr; checkHead &rArr; readSCS &rArr; Uart_Read &rArr; HAL_UART_Receive &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feetech_servo_move
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_and_pre_put_void
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_and_pre_put_avoid
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_and_pre_put
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_and_pre_put
</UL>

<P><STRONG><a name="[121]"></a>put_claw_down_pile_slightly</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, my_servo.o(i.put_claw_down_pile_slightly))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = put_claw_down_pile_slightly &rArr; feetech_servo_move &rArr; WritePosEx &rArr; genWrite &rArr; Ack &rArr; checkHead &rArr; readSCS &rArr; Uart_Read &rArr; HAL_UART_Receive &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feetech_servo_move
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_material_get_and_put_some_with_load_first
</UL>

<P><STRONG><a name="[116]"></a>put_claw_down_slightly</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, my_servo.o(i.put_claw_down_slightly))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = put_claw_down_slightly &rArr; feetech_servo_move &rArr; WritePosEx &rArr; genWrite &rArr; Ack &rArr; checkHead &rArr; readSCS &rArr; Uart_Read &rArr; HAL_UART_Receive &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feetech_servo_move
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_and_pre_put_spin_plate_avoid_collide
</UL>

<P><STRONG><a name="[f6]"></a>put_claw_down_state</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, my_servo.o(i.put_claw_down_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = put_claw_down_state &rArr; feetech_servo_move &rArr; WritePosEx &rArr; genWrite &rArr; Ack &rArr; checkHead &rArr; readSCS &rArr; Uart_Read &rArr; HAL_UART_Receive &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feetech_servo_move
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_and_put_spin_plate
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_and_pre_put_spin_plate_avoid_collide
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_and_pre_put_avoid
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_and_pre_put
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_and_load_openloop_with_temp_put
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_and_load_openloop_avoid
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_and_load_openloop
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_and_pre_put
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_and_load_openloop
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;old_get_from_plate_all_movement
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_from_plate_all_movement
</UL>

<P><STRONG><a name="[109]"></a>put_claw_up</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, my_servo.o(i.put_claw_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = put_claw_up &rArr; feetech_servo_move &rArr; WritePosEx &rArr; genWrite &rArr; Ack &rArr; checkHead &rArr; readSCS &rArr; Uart_Read &rArr; HAL_UART_Receive &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feetech_servo_move
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_new_material_all_process
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;old_function_test
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;old_all_process
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_final_function_test
</UL>

<P><STRONG><a name="[f5]"></a>put_claw_up_top</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, my_servo.o(i.put_claw_up_top))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = put_claw_up_top &rArr; feetech_servo_move &rArr; WritePosEx &rArr; genWrite &rArr; Ack &rArr; checkHead &rArr; readSCS &rArr; Uart_Read &rArr; HAL_UART_Receive &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feetech_servo_move
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_and_put_spin_plate
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_and_pre_put_void
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_and_pre_put_spin_plate_avoid_collide
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_and_pre_put
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_and_load_openloop_with_temp_put
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_and_load_openloop
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_and_pre_put
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_and_load_openloop
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;old_new_init_car_arm
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;old_material_get_and_put_some_with_load_first
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;old_get_from_plate_all_movement
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_material_test
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_material_get_and_put_some_with_load_first
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_from_plate_all_movement
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_from_ground_in_random_position
</UL>

<P><STRONG><a name="[10d]"></a>put_claw_up_top_slight</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, my_servo.o(i.put_claw_up_top_slight))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = put_claw_up_top_slight &rArr; feetech_servo_move &rArr; WritePosEx &rArr; genWrite &rArr; Ack &rArr; checkHead &rArr; readSCS &rArr; Uart_Read &rArr; HAL_UART_Receive &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feetech_servo_move
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_and_put_spin_plate
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_and_pre_put_spin_plate_avoid_collide
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_and_pre_put_avoid
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_and_pre_put
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_and_load_openloop_avoid
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_and_load_openloop
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_from_plate_all_movement
</UL>

<P><STRONG><a name="[cc]"></a>rFlushSCS</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, scserail.o(i.rFlushSCS))
<BR><BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nopDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;genWrite
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read
</UL>

<P><STRONG><a name="[7a]"></a>readSCS</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, scserail.o(i.readSCS))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = readSCS &rArr; Uart_Read &rArr; HAL_UART_Receive &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkHead
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ack
</UL>

<P><STRONG><a name="[d0]"></a>readWord</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, scs.o(i.readWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = readWord &rArr; Read &rArr; checkHead &rArr; readSCS &rArr; Uart_Read &rArr; HAL_UART_Receive &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCS2Host
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPos
</UL>

<P><STRONG><a name="[e5]"></a>servo_move_with_limit</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, my_servo.o(i.servo_move_with_limit))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = servo_move_with_limit &rArr; feetech_servo_move &rArr; WritePosEx &rArr; genWrite &rArr; Ack &rArr; checkHead &rArr; readSCS &rArr; Uart_Read &rArr; HAL_UART_Receive &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_to_screen
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feetech_servo_move
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_position_with_camera
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_plate
</UL>

<P><STRONG><a name="[10a]"></a>single_line_adjust</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, main.o(i.single_line_adjust))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = single_line_adjust &rArr; slight_spin_and_move &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slight_spin_and_move
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_motor_error
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_show_origin_data
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_clear_screen
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reliable_UART_Transmit
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_new_material_all_process
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;old_function_test
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;old_all_process
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_final_function_test
</UL>

<P><STRONG><a name="[124]"></a>single_line_circle_adjust</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, main.o(i.single_line_circle_adjust))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = single_line_circle_adjust &rArr; slight_spin_and_move &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slight_spin_and_move
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_motor_error
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_show_origin_data
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_clear_screen
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reliable_UART_Transmit
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_new_material_all_process
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;old_function_test
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;old_all_process
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_material_test
</UL>

<P><STRONG><a name="[11b]"></a>slight_spin_and_move</STRONG> (Thumb, 1718 bytes, Stack size 64 bytes, motor.o(i.slight_spin_and_move))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = slight_spin_and_move &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Emm_V5_Vel_Control
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Emm_V5_Synchronous_motion
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;single_line_circle_adjust
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;single_line_adjust
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_from_ground_in_random_position
</UL>

<P><STRONG><a name="[ab]"></a>spin_all_direction_tim</STRONG> (Thumb, 302 bytes, Stack size 8 bytes, motor.o(i.spin_all_direction_tim))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = spin_all_direction_tim &rArr; Emm_V5_Vel_Control &rArr; usart_SendCmd_u1 &rArr; usart_SendByte_u1
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Emm_V5_Vel_Control
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Emm_V5_Synchronous_motion
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Emm_V5_Stop_Now
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[12e]"></a>spin_left_180</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, motor.o(i.spin_left_180))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = spin_left_180 &rArr; Emm_V5_Pos_Control &rArr; usart_SendCmd_u1 &rArr; usart_SendByte_u1
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Emm_V5_Synchronous_motion
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Emm_V5_Pos_Control
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;old_function_test
</UL>

<P><STRONG><a name="[131]"></a>spin_left_90</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, motor.o(i.spin_left_90))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = spin_left_90 &rArr; Emm_V5_Pos_Control &rArr; usart_SendCmd_u1 &rArr; usart_SendByte_u1
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Emm_V5_Synchronous_motion
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Emm_V5_Pos_Control
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;old_function_test
</UL>

<P><STRONG><a name="[12a]"></a>spin_right</STRONG> (Thumb, 198 bytes, Stack size 40 bytes, motor.o(i.spin_right))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = spin_right &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Emm_V5_Synchronous_motion
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Emm_V5_Pos_Control
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_new_material_all_process
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;old_all_process
</UL>

<P><STRONG><a name="[12f]"></a>spin_right_180</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, motor.o(i.spin_right_180))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = spin_right_180 &rArr; Emm_V5_Pos_Control &rArr; usart_SendCmd_u1 &rArr; usart_SendByte_u1
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Emm_V5_Synchronous_motion
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Emm_V5_Pos_Control
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;old_function_test
</UL>

<P><STRONG><a name="[130]"></a>spin_right_90</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, motor.o(i.spin_right_90))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = spin_right_90 &rArr; Emm_V5_Pos_Control &rArr; usart_SendCmd_u1 &rArr; usart_SendByte_u1
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Emm_V5_Synchronous_motion
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Emm_V5_Pos_Control
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;old_function_test
</UL>

<P><STRONG><a name="[f9]"></a>state_spin</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, my_servo.o(i.state_spin))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_and_put_spin_plate
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_and_pre_put_void
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_and_pre_put_avoid
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_and_pre_put
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_and_pre_put
</UL>

<P><STRONG><a name="[129]"></a>state_spin_angles</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, my_servo.o(i.state_spin_angles))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_motor_servo_screen_test
</UL>

<P><STRONG><a name="[f1]"></a>state_spin_without_claw</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, my_servo.o(i.state_spin_without_claw))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_and_pre_put_spin_plate_avoid_collide
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_and_load_openloop_with_temp_put
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_and_load_openloop_avoid
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_and_load_openloop
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_and_load_openloop
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;old_new_init_car_arm
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;old_get_from_plate_all_movement
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_from_plate_all_movement
</UL>

<P><STRONG><a name="[110]"></a>state_spin_without_claw_avoid_collide</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, my_servo.o(i.state_spin_without_claw_avoid_collide))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_and_pre_put_spin_plate_avoid_collide
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_and_pre_put_avoid
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_and_load_openloop_with_temp_put
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_and_load_openloop_avoid
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_from_plate_all_movement
</UL>

<P><STRONG><a name="[11c]"></a>stop</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, motor.o(i.stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = stop &rArr; Emm_V5_Stop_Now &rArr; usart_SendCmd_u1 &rArr; usart_SendByte_u1
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Emm_V5_Stop_Now
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;single_line_circle_adjust
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;single_line_adjust
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_from_ground_in_random_position
</UL>

<P><STRONG><a name="[125]"></a>test_new_material_all_process</STRONG> (Thumb, 578 bytes, Stack size 96 bytes, main.o(i.test_new_material_all_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = test_new_material_all_process &rArr; new_material_get_and_put_some_with_load_first &rArr; new_get_and_pre_put_avoid &rArr; arm_shrink_all &rArr; feetech_servo_move &rArr; WritePosEx &rArr; genWrite &rArr; Ack &rArr; checkHead &rArr; readSCS &rArr; Uart_Read &rArr; HAL_UART_Receive &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;whole_arm_spin
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spin_right
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_claw_up
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_claw_down_near_ground
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_claw_down
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_all_direction_position_delay
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_all_direction_position
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_stretch
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;single_line_circle_adjust
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;single_line_adjust
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_material_get_and_put_some_with_load_first
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_from_plate_all_movement
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reliable_UART_Transmit
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_material_test
</UL>

<P><STRONG><a name="[137]"></a>usart_SendByte_u1</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, my_usart.o(i.usart_SendByte_u1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_SendByte_u1
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_SendCmd_u1
</UL>

<P><STRONG><a name="[7c]"></a>usart_SendCmd_u1</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, my_usart.o(i.usart_SendCmd_u1))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = usart_SendCmd_u1 &rArr; usart_SendByte_u1
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_SendByte_u1
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Emm_V5_Vel_Control
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Emm_V5_Synchronous_motion
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Emm_V5_Stop_Now
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Emm_V5_Pos_Control
</UL>

<P><STRONG><a name="[ce]"></a>wFlushSCS</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, scserail.o(i.wFlushSCS))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = wFlushSCS &rArr; Uart_Send &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;genWrite
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read
</UL>

<P><STRONG><a name="[11d]"></a>whole_arm_spin</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, my_servo.o(i.whole_arm_spin))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = whole_arm_spin &rArr; feetech_servo_move &rArr; WritePosEx &rArr; genWrite &rArr; Ack &rArr; checkHead &rArr; readSCS &rArr; Uart_Read &rArr; HAL_UART_Receive &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feetech_servo_move
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_new_material_all_process
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;old_new_init_car_arm
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;old_material_get_and_put_some_with_load_first
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;old_get_from_plate_all_movement
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;old_all_process
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_material_get_and_put_some_with_load_first
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_from_plate_all_movement
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_get_from_ground_in_random_position
</UL>

<P><STRONG><a name="[cd]"></a>writeBuf</STRONG> (Thumb, 148 bytes, Stack size 48 bytes, scs.o(i.writeBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = writeBuf &rArr; writeSCS
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeSCS
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;genWrite
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read
</UL>

<P><STRONG><a name="[138]"></a>writeSCS</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, scserail.o(i.writeSCS))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = writeSCS
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeBuf
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[95]"></a>TIM_ITRx_SetConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.TIM_ITRx_SetConfig))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[a2]"></a>TIM_OC1_SetConfig</STRONG> (Thumb, 88 bytes, Stack size 20 bytes, stm32f4xx_hal_tim.o(i.TIM_OC1_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_OC1_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[a4]"></a>TIM_OC3_SetConfig</STRONG> (Thumb, 96 bytes, Stack size 20 bytes, stm32f4xx_hal_tim.o(i.TIM_OC3_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_OC3_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[a5]"></a>TIM_OC4_SetConfig</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(i.TIM_OC4_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC4_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[93]"></a>TIM_TI1_ConfigInputStage</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.TIM_TI1_ConfigInputStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_TI1_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[94]"></a>TIM_TI2_ConfigInputStage</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.TIM_TI2_ConfigInputStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_TI2_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[89]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.__NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>

<P><STRONG><a name="[5e]"></a>UART_DMAAbortOnError</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(i.UART_DMAAbortOnError))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_DMAAbortOnError
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_uart.o(i.HAL_UART_IRQHandler)
</UL>
<P><STRONG><a name="[b5]"></a>UART_EndRxTransfer</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.UART_EndRxTransfer))
<BR><BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>

<P><STRONG><a name="[b4]"></a>UART_Receive_IT</STRONG> (Thumb, 194 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(i.UART_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = UART_Receive_IT &rArr; HAL_UARTEx_RxEventCallback &rArr; UART_handle_function_3 &rArr; UART_receive_process_3 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[bb]"></a>UART_SetConfig</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[bd]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, stm32f4xx_hal_uart.o(i.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive
</UL>

<P><STRONG><a name="[e1]"></a>_printf_core</STRONG> (Thumb, 436 bytes, Stack size 96 bytes, printf3.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$3
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$3
</UL>

<P><STRONG><a name="[60]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printf3.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$3
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf3.o(i.__0sprintf$3)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
